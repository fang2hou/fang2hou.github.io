<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on 方舟</title><link>https://fang2hou.com/tags/rust/</link><description>Recent content in Rust on 方舟</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 04 Sep 2021 11:01:00 +0900</lastBuildDate><atom:link href="https://fang2hou.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>由 C++ 入门 Rust 03（拷贝，所有权及引用）</title><link>https://fang2hou.com/post/cpp-to-rust-03/</link><pubDate>Sat, 04 Sep 2021 11:01:00 +0900</pubDate><guid>https://fang2hou.com/post/cpp-to-rust-03/</guid><description>前言 拷贝问题，或者说拷贝背后的实现在大部分编程语言中的表现都是存在差异的。Rust 在拷贝上采用了较为少见的所有权机制。作为学习的一环，下面我会使用一些小例子进行简单的说明解释。
拷贝 种类 在看代码前，首先要复习一下深拷贝和浅拷贝的区别。
深拷贝：其实这是最直观的拷贝形式，将拷贝对象持有的全部信息数据都执行拷贝操作，然后产生一个完全独立的对象。特点为修改深拷贝后的对象数据不会作用于原对象。
浅拷贝：浅拷贝对于一些常见的，特别是存放在栈上的数据采用完全拷贝字面量的操作。但是对于对象，则只会拷贝对象的数据指针，属性等。特点之与深拷贝，操作浅拷贝后的对象会同时作用于之前的对象。
代码 1 fn main() { let x = 1; let y = x; print(&amp;quot;{}&amp;quot;, x); // 1 print(&amp;quot;{}&amp;quot;, y); // 1 } 这段代码是非常简洁易懂的，即程序拷贝 x 到 y。在这里 x 是被自动推断为了 i32 类型，属于指定大小的类型而不是对象，那么理应被存于栈中。上面分类中也有提到，对于这类变量，拷贝都是直接复制字面量的。所以这里的拷贝操作与一般编程语言无二。</description></item><item><title>由 C++ 入门 Rust 02（隐藏）</title><link>https://fang2hou.com/post/cpp-to-rust-02/</link><pubDate>Fri, 03 Sep 2021 10:09:00 +0900</pubDate><guid>https://fang2hou.com/post/cpp-to-rust-02/</guid><description>前言 之前一篇文章，有简略的介绍 Rust 中比较有特色的语法——隐藏。在本文中将会进行一个小实验来进一步了解 Rust 变量隐藏的细节。
理解隐藏 代码 1 先看下下面这段简单的代码，函数内第二行和第三行都对变量 x 进行了隐藏，故最后输出时，x 为 yes 字符串。</description></item><item><title>由 C++ 入门 Rust 01（函数变量篇）</title><link>https://fang2hou.com/post/cpp-to-rust-01/</link><pubDate>Tue, 25 May 2021 13:19:20 +0900</pubDate><guid>https://fang2hou.com/post/cpp-to-rust-01/</guid><description>Rust Rust 是一款主攻编程安全的语言，其最引人注目的就是所有权概念。在该概念下你不需要费神考虑是否存在内存上的编程陷阱，大部分操作都会被 Rust 编译器自动捕获。同时，Rust 还提供了便利的垃圾回收机制。作为这几年的新起之秀，Rust 越来越被广泛的运用于日常开发之中。
本系列文章将尝试从一位 C++ 学习者的视角来掌握 Rust 中的核心概念。</description></item></channel></rss>